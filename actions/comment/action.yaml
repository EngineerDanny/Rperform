name: "comment"
description: "Action to comment Rperform results on the appropriate PR. Needs read/write access."
inputs:
  GITHUB_TOKEN:
    description: "The GITHUB_TOKEN secret."
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up git user
      run: |
        git config --local user.name "GitHub Actions"
        git config --local user.email "actions@github.com"
        git config pull.rebase false
      shell: bash

    - name: Set-Up Git
      run: |
        REMOTE_EXISTS=$(git ls-remote --heads origin rperform-branch)
        if [[ -z ${REMOTE_EXISTS} ]]; then
          # git checkout -b rperform-branch
          git switch --orphan rperform-branch
          echo "Remote does not exist"
        else
          # git checkout -b rperform-branch
          git switch --orphan rperform-branch
          git pull origin rperform-branch
          echo "Remote exists"
        fi  
      shell: bash

    - name: "Download artifact"
      id: "download"
      uses: actions/github-script@v3.1.0
      with:
        script: |
          var artifacts = await github.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: ${{github.event.workflow_run.id }},
          });
          var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "pr"
          })[0];
          var download = await github.actions.downloadArtifact({
             owner: context.repo.owner,
             repo: context.repo.repo,
             artifact_id: matchArtifact.id,
             archive_format: 'zip',
          });
          var fs = require('fs');
          fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
    
    - name: Extract artifact
      run: unzip -o -d rperform-results/ pr.zip
      shell: bash

    - name: Uploading Results
      run: |
        git add -- rperform-results/ ':!rperform-results/PR_NO' ':!rperform-results/TIME_NO'
        git commit --allow-empty -m "Benchmarking results"
        REMOTE_EXISTS=$(git ls-remote --heads origin rperform-branch)
        if [[ -z ${REMOTE_EXISTS} ]]; then
          git push -u origin rperform-branch
          echo "Remote does not exist"
        else
          git push -f origin rperform-branch
          echo "Remote exists"
        fi  
      shell: bash

    - name: "Comment on PR"
      id: "comment"
      uses: actions/github-script@v6
      with:
        script: |
          function readFiles(dir) {
            var files = fs.readdirSync(dir);
            var allFiles = [];
            files.forEach(function (file) {
              var path = dir + "/" + file;
              if (fs.statSync(path).isDirectory()) {
                allFiles = allFiles.concat(readFiles(path));
              } else {
                allFiles.push(path);
              }
            });
            // return an array of allFiles which contain "comment.txt" in the name
            return allFiles.filter(function (file) {
              return file.indexOf("comment.txt") > -1;
            });
          }
          
          const fs = require('fs');
          const prNumber = Number(fs.readFileSync('./rperform-results/PR_NO'));
          const initTime = Number(fs.readFileSync('./rperform-results/TIME_NO'));
          
          var pr_files = readFiles('./rperform-results');
          var report = "";

           pr_files.forEach(file => {
            const split1 = file.split("_");
            const split2 = split1[1].split("/");
            const scriptTime =  Number(split2[0]);

            if(scriptTime >= initTime){
              const fileBody = fs.readFileSync(file).toString();
              report += fileBody;
            }
          });

            // Get the list of all the comments on the PR
            const response = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
            })
            const comments = response.data;

            // Get the comment made by the action
            const commentIdentifier = "<!-- Rperform-action comment-->"
            const actionComment = comments.find(comment => comment.body.includes(commentIdentifier))
            const newCommentBody = `${commentIdentifier}\n${report}`

            // Print the comment made by the action
            console.log(actionComment);
            
            // If actionComment exists, update it otherwise create a new comment
            if (actionComment) {
                await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: actionComment.id,
                    body: newCommentBody
                })
            } else {
                await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: newCommentBody
                })
            }